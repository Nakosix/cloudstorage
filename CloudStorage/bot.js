require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const https = require('https');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const storagePath = path.join(__dirname, 'storage');
if (!fs.existsSync(storagePath)) fs.mkdirSync(storagePath);

// --- –ê–ù–¢–ò–°–ü–ê–ú ---
const spamControl = new Map(); // userId -> { timestamps: [], blockedUntil: timestamp }

function isSpamming(userId) {
    const now = Date.now();
    const windowMs = 10000; // 10 —Å–µ–∫—É–Ω–¥
    const maxMessages = 5;

    let user = spamControl.get(userId);
    if (!user) {
        user = { timestamps: [], blockedUntil: 0 };
        spamControl.set(userId, user);
    }

    if (now < user.blockedUntil) return true;

    user.timestamps = user.timestamps.filter(ts => now - ts < windowMs);
    user.timestamps.push(now);

    if (user.timestamps.length > maxMessages) {
        user.blockedUntil = now + 30000; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        return true;
    }

    return false;
}

// --- –í–°–ü–û–ú–û–ì–ê–ï–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
function ensureUserFolder(userId) {
    const userPath = path.join(storagePath, userId.toString());
    try {
        if (!fs.existsSync(userPath)) {
            fs.mkdirSync(userPath);
            console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
    } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
    }
    return userPath;
}

async function downloadFile(fileId, fileName, chatId) {
    const userFolder = ensureUserFolder(chatId);
    const filePath = path.join(userFolder, fileName);

    try {
        const fileLink = await bot.getFileLink(fileId);
        const fileStream = fs.createWriteStream(filePath);

        https.get(fileLink, (res) => {
            res.pipe(fileStream);
            fileStream.on('finish', () => {
                bot.sendMessage(chatId, `‚úÖ –§–∞–π–ª "${fileName}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`);
            });
        }).on('error', (err) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª:', err);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
    }
}

// --- –ö–ù–û–ü–ö–ò ---
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const options = {
        reply_markup: {
            keyboard: [
                ['üìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª'],
                ['üì§ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª']
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        }
    };

    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–ª–∞–∫–æ ‚òÅÔ∏è\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é. (–¥–æ 50–º–±)', options);
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –° –ü–û–°–õ–ï–î–£–Æ–©–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò ---
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (isSpamming(chatId)) {
        return bot.sendMessage(chatId, '‚õîÔ∏è –ú–µ–¥–ª–µ–Ω–Ω–µ–µ. –¢—ã —Ñ–ª—É–¥–∏—à—å!');
    }

    if (text === 'üì§ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª') {
        const userFolder = path.join(storagePath, chatId.toString());
        if (!fs.existsSync(userFolder)) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
    
        const files = fs.readdirSync(userFolder);
        if (files.length === 0) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
    
        // —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        const keyboard = [];
        for (let i = 0; i < files.length; i += 3) {
            const row = [];
            for (let j = i; j < i + 3 && j < files.length; j++) {
                row.push({
                    text: `${j + 1}`,
                    callback_data: `download_file_${j}`
                });
            }
            keyboard.push(row);
        }
    
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } else if (text === 'üìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤') {
        const userFolder = path.join(storagePath, chatId.toString());
        if (!fs.existsSync(userFolder)) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
    
        const files = fs.readdirSync(userFolder);
        if (files.length === 0) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
    
        bot.sendMessage(chatId, '–í–æ—Ç —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã:\n' + files.join('\n'));
    } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª') {
        const userFolder = path.join(storagePath, chatId.toString());
        if (!fs.existsSync(userFolder)) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');

        const files = fs.readdirSync(userFolder);
        if (files.length === 0) return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');

        const keyboard = [];
        for (let i = 0; i < files.length; i += 3) {
            const row = [];
            for (let j = i; j < i + 3 && j < files.length; j++) {
                row.push({
                    text: `${j + 1}`,
                    callback_data: `delete_file_${j}`
                });
            }
            keyboard.push(row);
        }

        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    }
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ù–ê –ö–ù–û–ü–ö–£ –° –ù–û–ú–ï–†–û–ú –§–ê–ô–õ–ê ---
bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;

    if (data.startsWith('download_file_')) {
        const index = parseInt(data.replace('download_file_', ''));

        const userFolder = path.join(storagePath, chatId.toString());
        const files = fs.readdirSync(userFolder);

        if (index >= 0 && index < files.length) {
            const filePath = path.join(userFolder, files[index]);
            const ext = path.extname(files[index]).toLowerCase();

            if (ext === '.jpg' || ext === '.png' || ext === '.jpeg') {
                bot.sendPhoto(chatId, filePath, { caption: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
            } else if (ext === '.mp4') {
                bot.sendVideo(chatId, filePath, { caption: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ' });
            } else {
                bot.sendDocument(chatId, filePath);
            }
        } else {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç.');
        }
    } else if (data.startsWith('delete_file_')) {
        const index = parseInt(data.replace('delete_file_', ''));
        const userFolder = path.join(storagePath, chatId.toString());
        const files = fs.readdirSync(userFolder);

        if (index >= 0 && index < files.length) {
            const filePath = path.join(userFolder, files[index]);
            fs.unlinkSync(filePath);  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            bot.sendMessage(chatId, `‚úÖ –§–∞–π–ª "${files[index]}" –±—ã–ª —É–¥–∞–ª—ë–Ω.`);
        } else {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç.');
        }
    }

    bot.answerCallbackQuery(callbackQuery.id); // —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í (—Å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º) ---
const mediaHandlers = {
    document: (msg, file) => downloadFile(file.file_id, file.file_name, msg.chat.id),
    audio: (msg, file) => downloadFile(file.file_id, file.file_name || `audio_${file.file_id}.mp3`, msg.chat.id),
    voice: (msg, file) => downloadFile(file.file_id, `voice_${file.file_id}.ogg`, msg.chat.id),
    video: (msg, file) => downloadFile(file.file_id, `video_${file.file_id}.mp4`, msg.chat.id),
    video_note: (msg, file) => downloadFile(file.file_id, `video_note_${file.file_id}.mp4`, msg.chat.id),
    photo: (msg, file) => {
        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        bot.sendPhoto(msg.chat.id, file.file_id, { caption: '–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' })
            .then(() => downloadFile(file.file_id, `photo_${file.file_id}.jpg`, msg.chat.id));
    },
    sticker: (msg, file) => downloadFile(file.file_id, `sticker_${file.file_id}.webp`, msg.chat.id)
};

Object.entries(mediaHandlers).forEach(([type, handler]) => {
    bot.on(type, (msg) => {
        const chatId = msg.chat.id;
        if (isSpamming(chatId)) {
            return bot.sendMessage(chatId, '‚õîÔ∏è –¢—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–∞–π–ª—ã! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.');
        }

        const file = type === 'photo' ? msg.photo.pop() : msg[type];
        handler(msg, file);
    });
});

// --- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ü–û –ò–ú–ï–ù–ò ---
bot.onText(/\/download (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const index = parseInt(match[1]) - 1; // –∏–Ω–¥–µ–∫—Å –æ—Ç 0

    const userFolder = path.join(storagePath, chatId.toString());
    if (!fs.existsSync(userFolder)) {
        return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.');
    }

    const files = fs.readdirSync(userFolder);
    if (files.length === 0) {
        return bot.sendMessage(chatId, 'üìÇ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.');
    }

    if (index < 0 || index >= files.length) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.');
    }

    const filePath = path.join(userFolder, files[index]);
    bot.sendDocument(chatId, filePath);
});
